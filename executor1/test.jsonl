{"repo": "susam/ice", "path": "ice.py", "func_name": "Response.set_cookie", "original_string": "def set_cookie(self, name, value, attrs={}):\n        \"\"\"Add a Set-Cookie header to response object.\n\n        For a description about cookie attribute values, see\n        https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.\n\n        Arguments:\n          name (str): Name of the cookie\n          value (str): Value of the cookie\n          attrs (dict): Dicitionary with cookie attribute keys and\n                        values.\n        \"\"\"\n        cookie = http.cookies.SimpleCookie()\n        cookie[name] = value\n        for key, value in attrs.items():\n            cookie[name][key] = value\n        self.add_header('Set-Cookie', cookie[name].OutputString())", "language": "python", "code": "def set_cookie(self, name, value, attrs={}):\n        \"\"\"Add a Set-Cookie header to response object.\n\n        For a description about cookie attribute values, see\n        https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.\n\n        Arguments:\n          name (str): Name of the cookie\n          value (str): Value of the cookie\n          attrs (dict): Dicitionary with cookie attribute keys and\n                        values.\n        \"\"\"\n        cookie = http.cookies.SimpleCookie()\n        cookie[name] = value\n        for key, value in attrs.items():\n            cookie[name][key] = value\n        self.add_header('Set-Cookie', cookie[name].OutputString())", "code_tokens": ["def", "set_cookie", "(", "self", ",", "name", ",", "value", ",", "attrs", "=", "{", "}", ")", ":", "cookie", "=", "http", ".", "cookies", ".", "SimpleCookie", "(", ")", "cookie", "[", "name", "]", "=", "value", "for", "key", ",", "value", "in", "attrs", ".", "items", "(", ")", ":", "cookie", "[", "name", "]", "[", "key", "]", "=", "value", "self", ".", "add_header", "(", "'Set-Cookie'", ",", "cookie", "[", "name", "]", ".", "OutputString", "(", ")", ")"], "docstring": "", "docstring_tokens": [], "sha": "532e685c504ea96f9e42833594585159ac1d2068", "url": "https://github.com/susam/ice/blob/532e685c504ea96f9e42833594585159ac1d2068/ice.py#L794-L810", "partition": "test"}
{"repo": "CalebBell/thermo", "path": "thermo/refractivity.py", "func_name": "refractive_index", "original_string": "def refractive_index(CASRN, T=None, AvailableMethods=False, Method=None,\n                     full_info=True):\n    r'''This function handles the retrieval of a chemical's refractive\n    index. Lookup is based on CASRNs. Will automatically select a data source\n    to use if no Method is provided; returns None if the data is not available.\n\n    Function has data for approximately 4500 chemicals.\n\n    Parameters\n    ----------\n    CASRN : string\n        CASRN [-]\n\n    Returns\n    -------\n    RI : float\n        Refractive Index on the Na D line, [-]\n    T : float, only returned if full_info == True\n        Temperature at which refractive index reading was made\n    methods : list, only returned if AvailableMethods == True\n        List of methods which can be used to obtain RI with the given inputs\n\n    Other Parameters\n    ----------------\n    Method : string, optional\n        A string for the method name to use, as defined by constants in\n        RI_methods\n    AvailableMethods : bool, optional\n        If True, function will determine which methods can be used to obtain\n        RI for the desired chemical, and will return methods instead of RI\n    full_info : bool, optional\n        If True, function will return the temperature at which the refractive\n        index reading was made\n\n    Notes\n    -----\n    Only one source is available in this function. It is:\n\n        * 'CRC', a compillation of Organic RI data in [1]_.\n\n    Examples\n    --------\n    >>> refractive_index(CASRN='64-17-5')\n    (1.3611, 293.15)\n\n    References\n    ----------\n    .. [1] Haynes, W.M., Thomas J. Bruno, and David R. Lide. CRC Handbook of\n       Chemistry and Physics, 95E. Boca Raton, FL: CRC press, 2014.\n    '''\n    def list_methods():\n        methods = []\n        if CASRN in CRC_RI_organic.index:\n            methods.append(CRC)\n        methods.append(NONE)\n        return methods\n    if AvailableMethods:\n        return list_methods()\n    if not Method:\n        Method = list_methods()[0]\n\n    if Method == CRC:\n        _RI = float(CRC_RI_organic.at[CASRN, 'RI'])\n        if full_info:\n            _T = float(CRC_RI_organic.at[CASRN, 'RIT'])\n    elif Method == NONE:\n        _RI, _T = None, None\n    else:\n        raise Exception('Failure in in function')\n    if full_info:\n        return _RI, _T\n    else:\n        return _RI", "language": "python", "code": "def refractive_index(CASRN, T=None, AvailableMethods=False, Method=None,\n                     full_info=True):\n    r'''This function handles the retrieval of a chemical's refractive\n    index. Lookup is based on CASRNs. Will automatically select a data source\n    to use if no Method is provided; returns None if the data is not available.\n\n    Function has data for approximately 4500 chemicals.\n\n    Parameters\n    ----------\n    CASRN : string\n        CASRN [-]\n\n    Returns\n    -------\n    RI : float\n        Refractive Index on the Na D line, [-]\n    T : float, only returned if full_info == True\n        Temperature at which refractive index reading was made\n    methods : list, only returned if AvailableMethods == True\n        List of methods which can be used to obtain RI with the given inputs\n\n    Other Parameters\n    ----------------\n    Method : string, optional\n        A string for the method name to use, as defined by constants in\n        RI_methods\n    AvailableMethods : bool, optional\n        If True, function will determine which methods can be used to obtain\n        RI for the desired chemical, and will return methods instead of RI\n    full_info : bool, optional\n        If True, function will return the temperature at which the refractive\n        index reading was made\n\n    Notes\n    -----\n    Only one source is available in this function. It is:\n\n        * 'CRC', a compillation of Organic RI data in [1]_.\n\n    Examples\n    --------\n    >>> refractive_index(CASRN='64-17-5')\n    (1.3611, 293.15)\n\n    References\n    ----------\n    .. [1] Haynes, W.M., Thomas J. Bruno, and David R. Lide. CRC Handbook of\n       Chemistry and Physics, 95E. Boca Raton, FL: CRC press, 2014.\n    '''\n    def list_methods():\n        methods = []\n        if CASRN in CRC_RI_organic.index:\n            methods.append(CRC)\n        methods.append(NONE)\n        return methods\n    if AvailableMethods:\n        return list_methods()\n    if not Method:\n        Method = list_methods()[0]\n\n    if Method == CRC:\n        _RI = float(CRC_RI_organic.at[CASRN, 'RI'])\n        if full_info:\n            _T = float(CRC_RI_organic.at[CASRN, 'RIT'])\n    elif Method == NONE:\n        _RI, _T = None, None\n    else:\n        raise Exception('Failure in in function')\n    if full_info:\n        return _RI, _T\n    else:\n        return _RI", "code_tokens": ["def", "refractive_index", "(", "CASRN", ",", "T", "=", "None", ",", "AvailableMethods", "=", "False", ",", "Method", "=", "None", ",", "full_info", "=", "True", ")", ":", "def", "list_methods", "(", ")", ":", "methods", "=", "[", "]", "if", "CASRN", "in", "CRC_RI_organic", ".", "index", ":", "methods", ".", "append", "(", "CRC", ")", "methods", ".", "append", "(", "NONE", ")", "return", "methods", "if", "AvailableMethods", ":", "return", "list_methods", "(", ")", "if", "not", "Method", ":", "Method", "=", "list_methods", "(", ")", "[", "0", "]", "if", "Method", "==", "CRC", ":", "_RI", "=", "float", "(", "CRC_RI_organic", ".", "at", "[", "CASRN", ",", "'RI'", "]", ")", "if", "full_info", ":", "_T", "=", "float", "(", "CRC_RI_organic", ".", "at", "[", "CASRN", ",", "'RIT'", "]", ")", "elif", "Method", "==", "NONE", ":", "_RI", ",", "_T", "=", "None", ",", "None", "else", ":", "raise", "Exception", "(", "'Failure in in function'", ")", "if", "full_info", ":", "return", "_RI", ",", "_T", "else", ":", "return", "_RI"], "docstring": "", "docstring_tokens": [], "sha": "3857ed023a3e64fd3039a32d53576c24990ef1c3", "url": "https://github.com/CalebBell/thermo/blob/3857ed023a3e64fd3039a32d53576c24990ef1c3/thermo/refractivity.py#L44-L116", "partition": "valid"}